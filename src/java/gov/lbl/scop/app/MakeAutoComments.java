/*
 * Software to build and maintain SCOPe, https://scop.berkeley.edu/
 *
 * Copyright (C) 2008-2018 The Regents of the University of California
 *
 * For feedback, mailto:scope@compbio.berkeley.edu
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * Version 2.1 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
 * USA
 */
package gov.lbl.scop.app;

import java.sql.*;
import java.io.*;
import java.util.*;
import org.strbio.io.*;
import org.strbio.math.*;
import org.strbio.mol.*;
import org.strbio.util.*;
import org.strbio.IO;
import gov.lbl.scop.local.LocalSQL;

/**
   Make autogenerated comments
*/
public class MakeAutoComments {
    /**
       Make autogenerated comments for a scop domain node.  Will wipe
       out all previous autogenerated comments for the node.
    */
    final public static void makeComments(int nodeID) throws Exception {
        Statement stmt = LocalSQL.createStatement();

        stmt.executeUpdate("delete from scop_comment where is_autogenerated=1 and node_id="+nodeID);

        Vector<Integer> pdbChainIDs = new Vector<Integer>();
        int releaseID = 0;
        ResultSet rs = stmt.executeQuery("select c.id, c.pdb_release_id from link_pdb l, pdb_chain c where l.pdb_chain_id=c.id and l.node_id="+nodeID);
        while (rs.next()) {
            pdbChainIDs.add(new Integer(rs.getInt(1)));
            releaseID = rs.getInt(2);
        }
        rs.close();

        String compounds = "";
        for (Integer pdbChainID : pdbChainIDs) {
            rs = stmt.executeQuery("select c.description from pdb_compound c, pdb_chain_compound l where l.pdb_chain_id="+pdbChainID+" and l.pdb_compound_id=c.id");
            while (rs.next())
                compounds += rs.getString(1)+" ; ";
            rs.close();
        }
        compounds = compounds.toLowerCase();

        String title = "";
        String headers = "";
        rs = stmt.executeQuery("select title, class, keywords from pdb_headers where pdb_release_id="+releaseID);
        if (rs.next()) {
            title = rs.getString(1);
            headers = title+" ; "+
                rs.getString(2)+" ; "+
                rs.getString(3);
        }
        rs.close();

        String comment = "";
        if (headers.toLowerCase().indexOf("complex") > -1) {
            if (headers.indexOf("DNA") > -1)
                comment = "protein/DNA complex; ";
            if (headers.indexOf("RNA") > -1)
                comment += "protein/RNA complex; ";
        }

        String hets = "";
        rs = stmt.executeQuery("select distinct(h.description) from pdb_heterogen h, pdb_release_heterogen l where l.pdb_release_id="+releaseID+" and l.pdb_heterogen_id=h.id order by h.description");
        while (rs.next()) {
            String h = rs.getString(1).toLowerCase();
            if (!h.equals("hoh"))
                hets += ", "+h;
        }
        rs.close();
        if (hets.length() > 0)
            comment += "complexed with "+hets.substring(2)+"; ";

        if ((compounds.indexOf("mutant") > -1) ||
            (compounds.indexOf("mutation") > -1) ||
            (title.toLowerCase().indexOf("mutant") > -1) ||
            (title.toLowerCase().indexOf("mutation") > -1)) {
            comment += "mutant; ";
        }

        if (comment.length() > 0) {
            comment = comment.substring(0,comment.length()-2);
            comment = StringUtil.replace(comment,"\"","\\\"");
            stmt.executeUpdate("insert into scop_comment values (null, "+nodeID+", \""+comment+"\", 1)");
        }
        stmt.close();
    }

    final public static void main(String argv[]) {
        try {
            LocalSQL.connectRW();
            Statement stmt = LocalSQL.createStatement();
            ResultSet rs;

            int scopReleaseID = LocalSQL.getLatestSCOPRelease(false);

            int lastPublicRelease = LocalSQL.getLatestSCOPRelease(true);
            if (scopReleaseID==lastPublicRelease)
                throw new Exception("can't edit a public release");

            rs = stmt.executeQuery("select id from scop_node where level_id=8 and release_id="+scopReleaseID);
            while (rs.next())
                makeComments(rs.getInt(1));
            rs.close();

            stmt.close();
        }
        catch (Exception e) {
            System.out.println("Exception: "+e.getMessage());
            e.printStackTrace();
        }
    }
}
